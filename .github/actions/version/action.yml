name: "Manage Version Tags"
description: "Manage version tags for different branches and snapshots."

inputs:
  use-snapshot:
    description: "Enable/disable using snapshot tags."
    required: false
    default: "true"
  branch-prefixes:
    description: "Snapshot tag to use for non-release branches."
    required: false
    default: "main release/ feat/ fix/ refact/ versioning/"
  with-snapshot-tag:
    description: "Snapshot tag to use for non-release branches."
    required: false
    default: ".${GITHUB_SHA:0:7}"
  with-main-pre-release-tag:
    description: "Pre-release tag for main branch."
    required: false
    default: "-SNAPSHOT"
  with-release-pre-release-tag:
    description: "Pre-release tag for release branches."
    required: false
    default: "-SNAPSHOT"
  with-feat-pre-release-tag:
    description: "Pre-release tag for feature branches."
    required: false
    default: "-dev-SNAPSHOT"
  with-fix-pre-release-tag:
    description: "Pre-release tag for fix branches."
    required: false
    default: "-dev-SNAPSHOT"
  with-refact-pre-release-tag:
    description: "Pre-release tag for refactoring branches."
    required: false
    default: "-dev-SNAPSHOT"
  with-versioning-pre-release-tag:
    description: "Pre-release tag for refactoring branches."
    required: false
    default: "-dev-SNAPSHOT"
  with-default-tag:
    description: "Default tag to use if the specific branch tag is empty."
    required: false
    default: "-dev-SNAPSHOT"

outputs:
  VERSION:
    description: "Generated version with appropriate tag."
    value: ${{ steps.version.outputs.VERSION }}

runs:
  using: "composite"
  steps:
    - name: "Set Version Tag for Branch"
      env:
        GITHUB_HEAD_REF: ${{ github.head_ref }}
        GITHUB_REF: ${{ github.ref }}
      run: |
        VERSION=$(cat VERSION)
        echo "Original VERSION: $VERSION"

          # Initialize BRANCH_NAME_REF based on the event type
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            BRANCH_NAME_REF="refs/heads/$GITHUB_HEAD_REF"
          else
            BRANCH_NAME_REF="$GITHUB_REF"
          fi
          echo "Branch Name: $BRANCH_NAME_REF"

        # Split branch-prefixes input into an array
        IFS=' ' read -r -a BRANCH_PREFIXES <<< "${{ inputs.branch-prefixes }}"
        echo "Parsed BRANCH_PREFIXES: ${BRANCH_PREFIXES[@]}"

        TAGS=("${{ inputs.with-main-pre-release-tag }}" "${{ inputs.with-release-pre-release-tag }}" "${{ inputs.with-feat-pre-release-tag }}" "${{ inputs.with-fix-pre-release-tag }}" "${{ inputs.with-refact-pre-release-tag }}")
        echo "TAGS array: ${TAGS[@]}"

        for ((i=0; i<${#BRANCH_PREFIXES[@]}; i++)); do
          echo "Checking branch prefix: $BRANCH_NAME_REF == refs/heads/${BRANCH_PREFIXES[i]}"
          if [[ "$BRANCH_NAME_REF" == "refs/heads/${BRANCH_PREFIXES[i]}"* ]]; then
            echo "Match found: ${BRANCH_PREFIXES[i]}"
            # Use the specific tag if available; otherwise, use the default tag from inputs
            TAG_TO_USE="${TAGS[i]:-${{ inputs.with-default-tag }}}"
            echo "Tag to use: $TAG_TO_USE"
            VERSION=${VERSION/-SNAPSHOT/$TAG_TO_USE}
            echo "Updated VERSION: $VERSION"
            echo "$VERSION" > VERSION
            break
          fi
        done

        if [ -f VERSION ]; then
          echo "Final VERSION: $(cat VERSION)"
        else
          echo "VERSION file not found after processing."
          exit 1
        fi
      shell: bash

    - name: "Set Snapshot Tag"
      if: inputs.use-snapshot == 'false'
      run: |
        VERSION=$(cat VERSION)
        VERSION=${VERSION/-SNAPSHOT/${{ inputs.with-snapshot-tag }}}
        echo "$VERSION" > VERSION
      shell: bash
    - name: "Retrieve Version"
      id: version
      run: |
        if [ -f VERSION ]; then
          VERSION=$(cat VERSION)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION"
        else
          echo "Error: VERSION file not found." >&2
          exit 1
        fi
      shell: bash

    - name: "Output Version Information"
      shell: bash
      run: |
        echo "## Project Version Information" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ -z "${{ steps.version.outputs.VERSION }}" ]; then
          echo "The VERSION file could not be found, or it's empty. Unable to retrieve the version information." >> $GITHUB_STEP_SUMMARY
        else
          echo "The project is being built with the following version:" >> $GITHUB_STEP_SUMMARY
          echo "* **Version:** ${{ steps.version.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
        fi
