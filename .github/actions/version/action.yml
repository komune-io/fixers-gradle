name: "Manage Version Tags"
description: "Manage version tags for different branches and snapshots."

inputs:
  use-snapshot:
    description: "Enable/disable using snapshot tags."
    required: false
    default: "true"
  with-snapshot-tag:
    description: "Snapshot tag to use for non-release branches."
    required: false
    default: ".${GITHUB_SHA:0:7}"
  with-main-pre-release-tag:
    description: "Pre-release tag for main branch."
    required: false
    default: "-SNAPSHOT"
  with-release-pre-release-tag:
    description: "Pre-release tag for release branches."
    required: false
    default: "-SNAPSHOT"
  with-feat-pre-release-tag:
    description: "Pre-release tag for feature branches."
    required: false
    default: "-dev-SNAPSHOT"
  with-fix-pre-release-tag:
    description: "Pre-release tag for fix branches."
    required: false
    default: "-dev-SNAPSHOT"
  with-refact-pre-release-tag:
    description: "Pre-release tag for refactoring branches."
    required: false
    default: "-dev"

outputs:
  VERSION:
    description: "Generated version with appropriate tag."
    value: ${{ steps.version.outputs.VERSION }}

runs:
  using: "composite"
  steps:
    - name: "Set Version Tag for Branch"
      run: |
        VERSION=$(cat VERSION)
        BRANCH_PREFIXES=("main" "release/" "feat/" "fix/" "refact/")
        TAGS=("${{ inputs.with-main-pre-release-tag }}" "${{ inputs.with-release-pre-release-tag }}" "${{ inputs.with-feat-pre-release-tag }}" "${{ inputs.with-fix-pre-release-tag }}" "${{ inputs.with-refact-pre-release-tag }}")

        for ((i=0; i<${#BRANCH_PREFIXES[@]}; i++)); do
          if [[ ${{ github.ref }} == "refs/heads/${BRANCH_PREFIXES[i]}"* ]]; then
            VERSION=${VERSION/-SNAPSHOT/${TAGS[i]}}
            echo "$VERSION" > VERSION
            break
          fi
        done
      shell: bash

    - name: "Set Snapshot Tag"
      if: inputs.use-snapshot == 'false'
      run: |
        VERSION=$(cat VERSION)
        VERSION=${VERSION/-SNAPSHOT/${{ inputs.with-snapshot-tag }}}
        echo "$VERSION" > VERSION
      shell: bash
    - name: "Retrieve Version"
      id: version
      run: |
        if [ -f VERSION ]; then
          VERSION=$(cat VERSION)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION"
        else
          echo "Error: VERSION file not found." >&2
          exit 1
        fi
      shell: bash

    - name: "Output Version Information"
      shell: bash
      run: |
        echo "## Project Version Information" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ -z "${{ steps.version.outputs.VERSION }}" ]; then
          echo "The VERSION file could not be found, or it's empty. Unable to retrieve the version information." >> $GITHUB_STEP_SUMMARY
        else
          echo "The project is being built with the following version:" >> $GITHUB_STEP_SUMMARY
          echo "* **Version:** ${{ steps.version.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
        fi
